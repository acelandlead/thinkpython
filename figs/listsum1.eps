%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.26.4 (http://poppler.freedesktop.org)
%%Creator: matplotlib 0.99.1.1, http://matplotlib.sf.net
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 576 432
%%HiResBoundingBox: 0 0 576 432
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font T3_14_0
8 dict begin
/FontType 3 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox [-1021 -351 1681 1167] def
/Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
/BuildGlyph {
  exch /CharProcs get exch
  2 copy known not { pop /.notdef } if
  get exec
} bind def
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
/CharProcs 23 dict def
CharProcs begin
/parenright {
390 0 80 -131 304 759 setcachedevice
q
80 759 m
158 759 l
206 682 243 607 267 533 c
291 459 304 386 304 314 c
304 241 291 168 267 94 c
243 20 206 -54 158 -131 c
80 -131 l
123 -56 155 17 177 91 c
198 164 209 238 209 314 c
209 389 198 463 177 536 c
155 609 123 683 80 759 c
f
Q
} def
/seven {
636 0 82 0 551 729 setcachedevice
q
82 729 m
551 729 l
551 687 l
286 0 l
183 0 l
432 646 l
82 646 l
82 729 l
f
Q
} def
/hyphen {
361 0 49 234 312 314 setcachedevice
q
49 234 263 80 re
f
Q
} def
/one {
636 0 110 0 544 729 setcachedevice
q
124 83 m
285 83 l
285 639 l
110 604 l
110 694 l
284 729 l
383 729 l
383 83 l
544 83 l
544 0 l
124 0 l
124 83 l
f
Q
} def
/zero {
636 0 66 -13 570 742 setcachedevice
q
318 664 m
267 664 229 639 203 589 c
177 539 165 464 165 364 c
165 264 177 189 203 139 c
229 89 267 64 318 64 c
369 64 407 89 433 139 c
458 189 471 264 471 364 c
471 464 458 539 433 589 c
407 639 369 664 318 664 c
318 742 m
399 742 461 709 505 645 c
548 580 570 486 570 364 c
570 241 548 147 505 83 c
461 19 399 -13 318 -13 c
236 -13 173 19 130 83 c
87 147 66 241 66 364 c
66 486 87 580 130 645 c
173 709 236 742 318 742 c
f
Q
} def
/parenleft {
390 0 86 -131 310 759 setcachedevice
q
310 759 m
266 683 234 609 213 536 c
191 463 181 389 181 314 c
181 238 191 164 213 91 c
234 17 266 -56 310 -131 c
232 -131 l
183 -54 146 20 122 94 c
98 168 86 241 86 314 c
86 386 98 459 122 533 c
146 607 182 682 232 759 c
310 759 l
f
Q
} def
/space {
318 0 0 0 0 0 setcachedevice
q
Q
} def
/six {
636 0 70 -13 573 742 setcachedevice
q
330 404 m
286 404 251 388 225 358 c
199 328 186 286 186 234 c
186 181 199 139 225 109 c
251 79 286 64 330 64 c
374 64 409 79 435 109 c
461 139 474 181 474 234 c
474 286 461 328 435 358 c
409 388 374 404 330 404 c
526 713 m
526 623 l
501 635 476 644 451 650 c
425 656 400 659 376 659 c
310 659 260 637 226 593 c
192 549 172 482 168 394 c
187 422 211 444 240 459 c
269 474 301 482 336 482 c
409 482 467 459 509 415 c
551 371 573 310 573 234 c
573 159 550 99 506 54 c
462 9 403 -13 330 -13 c
246 -13 181 19 137 83 c
92 147 70 241 70 364 c
70 479 97 571 152 639 c
206 707 280 742 372 742 c
396 742 421 739 447 735 c
472 730 498 723 526 713 c
f
Q
} def
/two {
636 0 73 0 536 742 setcachedevice
q
192 83 m
536 83 l
536 0 l
73 0 l
73 83 l
110 121 161 173 226 239 c
290 304 331 346 348 365 c
380 400 402 430 414 455 c
426 479 433 504 433 528 c
433 566 419 598 392 622 c
365 646 330 659 286 659 c
255 659 222 653 188 643 c
154 632 117 616 78 594 c
78 694 l
118 710 155 722 189 730 c
223 738 255 742 284 742 c
359 742 419 723 464 685 c
509 647 532 597 532 534 c
532 504 526 475 515 449 c
504 422 484 390 454 354 c
446 344 420 317 376 272 c
332 227 271 164 192 83 c
f
Q
} def
/five {
636 0 77 -13 549 729 setcachedevice
q
108 729 m
495 729 l
495 646 l
198 646 l
198 467 l
212 472 227 476 241 478 c
255 480 270 482 284 482 c
365 482 429 459 477 415 c
525 370 549 310 549 234 c
549 155 524 94 475 51 c
426 8 357 -13 269 -13 c
238 -13 207 -10 175 -6 c
143 -1 111 6 77 17 c
77 116 l
106 100 136 88 168 80 c
199 72 232 69 267 69 c
323 69 368 83 401 113 c
433 143 450 183 450 234 c
450 284 433 324 401 354 c
368 384 323 399 267 399 c
241 399 214 396 188 390 c
162 384 135 375 108 363 c
108 729 l
f
Q
} def
/underscore {
500 0 -9 -235 510 -165 setcachedevice
q
-9 -235 519 70 re
f
Q
} def
/e {
615 0 55 -13 562 560 setcachedevice
q
562 296 m
562 252 l
149 252 l
153 190 171 142 205 110 c
238 78 284 62 344 62 c
378 62 412 66 444 74 c
476 82 509 95 541 113 c
541 28 l
509 14 476 3 442 -3 c
408 -9 373 -13 339 -13 c
251 -13 182 12 131 62 c
80 112 55 181 55 268 c
55 357 79 428 127 481 c
175 533 241 560 323 560 c
397 560 455 536 498 489 c
540 441 562 377 562 296 c
472 322 m
471 371 457 410 431 440 c
404 469 368 484 324 484 c
274 484 234 469 204 441 c
174 413 156 373 152 322 c
472 322 l
f
Q
} def
/d {
635 0 55 -13 544 760 setcachedevice
q
454 464 m
454 760 l
544 760 l
544 0 l
454 0 l
454 82 l
435 49 411 25 382 10 c
353 -5 319 -13 279 -13 c
213 -13 159 13 117 65 c
75 117 55 187 55 273 c
55 359 75 428 117 481 c
159 533 213 560 279 560 c
319 560 353 552 382 536 c
411 520 435 496 454 464 c
148 273 m
148 207 161 155 188 117 c
215 79 253 61 301 61 c
348 61 385 79 413 117 c
440 155 454 207 454 273 c
454 339 440 390 413 428 c
385 466 348 485 301 485 c
253 485 215 466 188 428 c
161 390 148 339 148 273 c
f
Q
} def
/i {
278 0 94 0 184 760 setcachedevice
q
94 547 m
184 547 l
184 0 l
94 0 l
94 547 l
94 760 m
184 760 l
184 646 l
94 646 l
94 760 l
f
Q
} def
/m {
974 0 91 0 889 560 setcachedevice
q
520 442 m
542 482 569 511 600 531 c
631 550 668 560 711 560 c
767 560 811 540 842 500 c
873 460 889 403 889 330 c
889 0 l
799 0 l
799 327 l
799 379 789 418 771 444 c
752 469 724 482 686 482 c
639 482 602 466 575 435 c
548 404 535 362 535 309 c
535 0 l
445 0 l
445 327 l
445 379 435 418 417 444 c
398 469 369 482 331 482 c
285 482 248 466 221 435 c
194 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
201 495 226 520 255 536 c
283 552 317 560 357 560 c
397 560 430 550 458 530 c
486 510 506 480 520 442 c
f
Q
} def
/l {
278 0 94 0 184 760 setcachedevice
q
94 0 90 760 re
f
Q
} def
/n {
634 0 91 0 549 560 setcachedevice
q
549 330 m
549 0 l
459 0 l
459 327 l
459 379 448 417 428 443 c
408 469 378 482 338 482 c
289 482 251 466 223 435 c
195 404 181 362 181 309 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
202 494 227 519 257 535 c
286 551 320 560 358 560 c
420 560 468 540 500 501 c
532 462 549 405 549 330 c
f
Q
} def
/p {
635 0 91 -207 580 560 setcachedevice
q
181 82 m
181 -207 l
91 -207 l
91 547 l
181 547 l
181 464 l
199 496 223 520 252 536 c
281 552 316 560 356 560 c
422 560 476 533 518 481 c
559 428 580 359 580 273 c
580 187 559 117 518 65 c
476 13 422 -13 356 -13 c
316 -13 281 -5 252 10 c
223 25 199 49 181 82 c
487 273 m
487 339 473 390 446 428 c
418 466 381 485 334 485 c
286 485 249 466 222 428 c
194 390 181 339 181 273 c
181 207 194 155 222 117 c
249 79 286 61 334 61 c
381 61 418 79 446 117 c
473 155 487 207 487 273 c
f
Q
} def
/s {
521 0 54 -13 472 560 setcachedevice
q
443 531 m
443 446 l
417 458 391 468 364 475 c
336 481 308 485 279 485 c
234 485 200 478 178 464 c
156 450 145 430 145 403 c
145 382 153 366 169 354 c
185 342 217 330 265 320 c
296 313 l
360 299 405 279 432 255 c
458 230 472 195 472 151 c
472 100 452 60 412 31 c
372 1 316 -13 246 -13 c
216 -13 186 -10 154 -5 c
122 0 89 8 54 20 c
54 113 l
87 95 120 82 152 74 c
184 65 216 61 248 61 c
290 61 323 68 346 82 c
368 96 380 117 380 144 c
380 168 371 187 355 200 c
339 213 303 226 247 238 c
216 245 l
160 257 119 275 95 299 c
70 323 58 356 58 399 c
58 450 76 490 112 518 c
148 546 200 560 268 560 c
301 560 332 557 362 552 c
391 547 418 540 443 531 c
f
Q
} def
/r {
411 0 91 0 411 560 setcachedevice
q
411 463 m
401 469 390 473 378 476 c
366 478 353 480 339 480 c
288 480 249 463 222 430 c
194 397 181 350 181 288 c
181 0 l
91 0 l
91 547 l
181 547 l
181 462 l
199 495 224 520 254 536 c
284 552 321 560 365 560 c
371 560 378 559 386 559 c
393 558 401 557 411 555 c
411 463 l
f
Q
} def
/u {
634 0 85 -13 543 560 setcachedevice
q
85 216 m
85 547 l
175 547 l
175 219 l
175 167 185 129 205 103 c
225 77 255 64 296 64 c
344 64 383 79 411 110 c
439 141 453 183 453 237 c
453 547 l
543 547 l
543 0 l
453 0 l
453 84 l
431 50 405 26 377 10 c
348 -5 315 -13 277 -13 c
214 -13 166 6 134 45 c
101 83 85 140 85 216 c
f
Q
} def
/t {
392 0 27 0 368 702 setcachedevice
q
183 702 m
183 547 l
368 547 l
368 477 l
183 477 l
183 180 l
183 135 189 106 201 94 c
213 81 238 75 276 75 c
368 75 l
368 0 l
276 0 l
206 0 158 13 132 39 c
106 65 93 112 93 180 c
93 477 l
27 477 l
27 547 l
93 547 l
93 702 l
183 702 l
f
Q
} def
/x {
592 0 29 0 559 547 setcachedevice
q
549 547 m
351 281 l
559 0 l
453 0 l
294 215 l
135 0 l
29 0 l
241 286 l
47 547 l
153 547 l
298 352 l
443 547 l
549 547 l
f
Q
} def
end
currentdict end
/T3_14_0 exch definefont pop
%%EndResource
/F14_0 /T3_14_0 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 576 432 re
W
q
1 j
2 J
/DeviceGray {} cs
[1] sc
/DeviceGray {} CS
[1] SC
0 0 576 432 re
f
0 0 576 432 re
S
0 w
/DeviceGray {} CS
[0] SC
72 43.2 446.4 345.6 re
f
q
72 43.2 446.4 345.6 re
W
2 w
/DeviceGray {} CS
[0.7] SC
139.189895 187.424514 m
178.493464 217.853084 l
206.37979 239.442498 l
228.010105 256.188548 l
245.683359 269.871067 l
260.625883 281.439472 l
273.569685 291.460481 l
284.986928 300.299637 l
295.2 308.206531 l
304.438847 315.359187 l
312.873254 321.88905 l
320.632156 327.895942 l
327.815778 333.457456 l
334.503569 338.635101 l
340.75958 343.478464 l
346.636199 348.028105 l
352.176823 352.31762 l
357.417804 356.375153 l
362.389895 360.224514 l
367.119347 363.886025 l
371.628742 367.37717 l
375.937653 370.713101 l
380.063149 373.907034 l
S
Q
q
72 43.2 446.4 345.6 re
W
3 w
/DeviceRGB {} CS
[0 0 1] SC
139.189895 177.664536 m
178.493464 223.152656 l
206.37979 235.689411 l
228.010105 255.821574 l
245.683359 268.017983 l
260.625883 275.170639 l
273.569685 284.764033 l
284.986928 293.268908 l
295.2 300.907301 l
304.438847 310.014958 l
312.873254 320.035967 l
320.632156 321.88905 l
327.815778 327.188622 l
334.503569 336.782017 l
340.75958 338.268126 l
346.636199 342.557642 l
352.176823 350.464536 l
357.417804 349.203228 l
362.389895 356.471428 l
367.119347 367.210586 l
371.628742 364.147055 l
375.937653 363.097443 l
380.063149 373.907034 l
S
Q
q
72 43.2 446.4 345.6 re
W
2 w
/DeviceGray {} CS
[0.7] SC
139.189895 153.242858 m
178.493464 183.671428 l
206.37979 205.260842 l
228.010105 222.006892 l
245.683359 235.689411 l
260.625883 247.257817 l
273.569685 257.278825 l
284.986928 266.117981 l
295.2 274.024875 l
304.438847 281.177531 l
312.873254 287.707395 l
320.632156 293.714286 l
327.815778 299.2758 l
334.503569 304.453445 l
340.75958 309.296808 l
346.636199 313.846449 l
352.176823 318.135964 l
357.417804 322.193497 l
362.389895 326.042858 l
367.119347 329.704369 l
371.628742 333.195514 l
375.937653 336.531445 l
380.063149 339.725378 l
S
Q
q
72 43.2 446.4 345.6 re
W
3 w
/DeviceRGB {} CS
[0 0.502 0] SC
139.189895 147.235967 m
178.493464 177.664536 l
206.37979 216 l
228.010105 216 l
245.683359 235.689411 l
260.625883 241.250925 l
273.569685 251.271933 l
284.986928 271.679494 l
295.2 281.700503 l
304.438847 287.707395 l
312.873254 290.539658 l
320.632156 293.268908 l
327.815778 303.289916 l
334.503569 303.289916 l
340.75958 310.014958 l
346.636199 312.129072 l
352.176823 316.186605 l
357.417804 328.875122 l
362.389895 327.188622 l
367.119347 330.524553 l
371.628742 333.718486 l
375.937653 336.782017 l
380.063149 339.725378 l
S
Q
0 J
0.5 w
/DeviceGray {} CS
[0] SC
72 43.2 m
72 47.2 l
S
72 388.8 m
72 384.8 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 61 24.2] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.9375 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.9375 Td
(0)
[7.632
0] Tj
15.269531 8.875 Td
/F14_0 8.4 Tf
(5)
[5.3424
0] Tj
Q
0.5 w
295.2 43.2 m
295.2 47.2 l
S
295.2 388.8 m
295.2 384.8 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 284.2 24.2] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.828125 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.828125 Td
(0)
[7.632
0] Tj
15.269531 8.765625 Td
/F14_0 8.4 Tf
(6)
[5.3424
0] Tj
Q
0.5 w
518.4 43.2 m
518.4 47.2 l
S
518.4 388.8 m
518.4 384.8 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 507.4 24.2] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.9375 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.9375 Td
(0)
[7.632
0] Tj
15.269531 8.875 Td
/F14_0 8.4 Tf
(7)
[5.3424
0] Tj
Q
0.5 w
139.189895 43.2 m
139.189895 45.2 l
S
139.189895 388.8 m
139.189895 386.8 l
S
178.493464 43.2 m
178.493464 45.2 l
S
178.493464 388.8 m
178.493464 386.8 l
S
206.37979 43.2 m
206.37979 45.2 l
S
206.37979 388.8 m
206.37979 386.8 l
S
228.010105 43.2 m
228.010105 45.2 l
S
228.010105 388.8 m
228.010105 386.8 l
S
245.683359 43.2 m
245.683359 45.2 l
S
245.683359 388.8 m
245.683359 386.8 l
S
260.625883 43.2 m
260.625883 45.2 l
S
260.625883 388.8 m
260.625883 386.8 l
S
273.569685 43.2 m
273.569685 45.2 l
S
273.569685 388.8 m
273.569685 386.8 l
S
284.986928 43.2 m
284.986928 45.2 l
S
284.986928 388.8 m
284.986928 386.8 l
S
362.389895 43.2 m
362.389895 45.2 l
S
362.389895 388.8 m
362.389895 386.8 l
S
401.693464 43.2 m
401.693464 45.2 l
S
401.693464 388.8 m
401.693464 386.8 l
S
429.57979 43.2 m
429.57979 45.2 l
S
429.57979 388.8 m
429.57979 386.8 l
S
451.210105 43.2 m
451.210105 45.2 l
S
451.210105 388.8 m
451.210105 386.8 l
S
468.883359 43.2 m
468.883359 45.2 l
S
468.883359 388.8 m
468.883359 386.8 l
S
483.825883 43.2 m
483.825883 45.2 l
S
483.825883 388.8 m
483.825883 386.8 l
S
496.769685 43.2 m
496.769685 45.2 l
S
496.769685 388.8 m
496.769685 386.8 l
S
508.186928 43.2 m
508.186928 45.2 l
S
508.186928 388.8 m
508.186928 386.8 l
S
/DeviceGray {} cs
[0] sc
1 w
[1 0 0 1 0 0] Tm
0 0 Td
292.45 12.48125 Td
/F14_0 12 Tf
(n)
[7.608
0] Tj
0.5 w
72 43.2 m
76 43.2 l
S
518.4 43.2 m
514.4 43.2 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 43 35.7] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.828125 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.828125 Td
(0)
[7.632
0] Tj
15.269531 8.765625 Td
/F14_0 8.4 Tf
(-)
[3.0324
0] Tj
18.300586 8.765625 Td
(2)
[5.3424
0] Tj
Q
0.5 w
72 216 m
76 216 l
S
518.4 216 m
514.4 216 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 43 208.5] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.9375 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.9375 Td
(0)
[7.632
0] Tj
15.269531 8.875 Td
/F14_0 8.4 Tf
(-)
[3.0324
0] Tj
18.300586 8.875 Td
(1)
[5.3424
0] Tj
Q
0.5 w
72 388.8 m
76 388.8 l
S
518.4 388.8 m
514.4 388.8 l
S
/DeviceGray {} cs
[0] sc
1 w
q
[1 0 0 1 46 381.3] cm
[1 0 0 1 0 0] Tm
0 0 Td
0 1.828125 Td
/F14_0 12 Tf
(1)
[7.632
0] Tj
7.634766 1.828125 Td
(0)
[7.632
0] Tj
15.269531 8.765625 Td
/F14_0 8.4 Tf
(0)
[5.3424
0] Tj
Q
0.5 w
72 95.217983 m
74 95.217983 l
S
518.4 95.217983 m
516.4 95.217983 l
S
72 125.646553 m
74 125.646553 l
S
518.4 125.646553 m
516.4 125.646553 l
S
72 147.235967 m
74 147.235967 l
S
518.4 147.235967 m
516.4 147.235967 l
S
72 163.982017 m
74 163.982017 l
S
518.4 163.982017 m
516.4 163.982017 l
S
72 177.664536 m
74 177.664536 l
S
518.4 177.664536 m
516.4 177.664536 l
S
72 189.232941 m
74 189.232941 l
S
518.4 189.232941 m
516.4 189.232941 l
S
72 199.25395 m
74 199.25395 l
S
518.4 199.25395 m
516.4 199.25395 l
S
72 208.093106 m
74 208.093106 l
S
518.4 208.093106 m
516.4 208.093106 l
S
72 268.017983 m
74 268.017983 l
S
518.4 268.017983 m
516.4 268.017983 l
S
72 298.446553 m
74 298.446553 l
S
518.4 298.446553 m
516.4 298.446553 l
S
72 320.035967 m
74 320.035967 l
S
518.4 320.035967 m
516.4 320.035967 l
S
72 336.782017 m
74 336.782017 l
S
518.4 336.782017 m
516.4 336.782017 l
S
72 350.464536 m
74 350.464536 l
S
518.4 350.464536 m
516.4 350.464536 l
S
72 362.032941 m
74 362.032941 l
S
518.4 362.032941 m
516.4 362.032941 l
S
72 372.05395 m
74 372.05395 l
S
518.4 372.05395 m
516.4 372.05395 l
S
72 380.893106 m
74 380.893106 l
S
518.4 380.893106 m
516.4 380.893106 l
S
/DeviceGray {} cs
[0] sc
1 w
[1 0 0 1 0 0] Tm
0 0 Td
[0 1 -1 0 38 181.257813] Tm
0 0 Td
0 1.578125 Td
/F14_0 12 Tf
(run time \(s\))
[4.932
0
7.608
0
7.608
0
3.816
0
4.704
0
3.336
0
11.688
0
7.38
0
3.816
0
4.68
0
6.252
0
4.68
0] Tj
2 J
72 388.8 m
518.4 388.8 l
S
518.4 43.2 m
518.4 388.8 l
S
72 43.2 m
518.4 43.2 l
S
72 43.2 m
72 388.8 l
S
/DeviceGray {} cs
[1] sc
373.844375 50.4 137.355625 46.595 re
f
373.844375 50.4 137.355625 46.595 re
S
3 w
/DeviceRGB {} CS
[0 0 1] SC
383.924375 85.634375 m
404.084375 85.634375 l
S
0 J
/DeviceGray {} cs
[0] sc
1 w
/DeviceGray {} CS
[0] SC
[1 0 0 1 0 0] Tm
0 0 Td
419.924375 80.594375 Td
/F14_0 14.4 Tf
(sum_extend)
[7.5024
0
9.1296
0
14.0256
0
7.2
0
8.856
0
8.5248
0
5.6448
0
8.856
0
9.1296
0
9.144
0] Tj
2 J
3 w
/DeviceRGB {} CS
[0 0.502 0] SC
383.924375 64.496875 m
404.084375 64.496875 l
S
0 J
/DeviceGray {} cs
[0] sc
1 w
/DeviceGray {} CS
[0] SC
[1 0 0 1 0 0] Tm
0 0 Td
419.924375 59.456875 Td
/F14_0 14.4 Tf
(sum_plus)
[7.5024
0
9.1296
0
14.0256
0
7.2
0
9.144
0
4.0032
0
9.1296
0
7.5024
0] Tj
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font T3_14_0
%%EOF
